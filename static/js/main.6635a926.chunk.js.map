{"version":3,"sources":["Common Components/Navbar.js","pages/Main.js","pages/Beginner.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Nav","className","Navbar","Brand","href","style","textDecoration","pointerEvents","color","fontSize","styled","Main","Container","Btn","variant","Button","Beginner","id","useParams","history","useHistory","useState","questions","setQuestions","images","setImages","max","setMax","scores","setscores","rand","setRandom","count","setcount","token","settoken","answers","setAnswers","textvalue","settextvalue","incorrect","setIncorrect","randomnumber","ans","setans","useStopwatch","autoStart","seconds","minutes","pause","shuffleWord","word","length","first","slice","middle","last","split","sort","Math","random","join","processSentence","sentence","map","range","start","end","Array","fill","_","idx","checkanswer","user_ans","console","log","temp","floor","includes","push","useEffect","axios","get","then","Response","data","CardStyle","border","marginRight","src","alt","height","marginTop","value","onClick","Form","onSubmit","e","preventDefault","Control","type","onChange","target","placeholder","disabled","post","penalty","moduleId","res","parseInt","window","location","reload","Card","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6635a926.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { Navbar } from \"react-bootstrap\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <>\r\n            <Nav className=\"fixed-top\" >\r\n                <Navbar.Brand href=''>\r\n\r\n                </Navbar.Brand>\r\n                <a href=\"/\" style={{textDecoration: 'none', pointerEvents: 'none', color: 'white'}}><h2 className=\"d-inline-block ml-3 mt-2 \" style={{ fontSize: 40 }}>WELCOME</h2></a>\r\n\r\n            </Nav>\r\n        </>\r\n    )\r\n}\r\nexport default Header;\r\n\r\n\r\nconst Nav = styled(Navbar)`\r\n\r\nbackground: #1F386B;\r\ncolor:white;\r\n`;","import React from 'react';\r\n\r\nimport { Container, Button } from 'react-bootstrap';\r\nimport Header from '../Common Components/Navbar';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Main = () => {\r\n    return (\r\n        <>\r\n            {/* <h1>WELCOME</h1> */}\r\n            <Header />\r\n            <Container>\r\n\r\n                <a href='/beginner/2'><Btn variant='danger' className='mb-3' > BEGINNERS LEVEL </Btn></a><br />\r\n                <Btn variant='warning' className='mb-3'> INTERMEDIATE LEVEL </Btn><br />\r\n                <Btn variant='success' className='mb-3'> ADVANCED LEVEL </Btn>\r\n\r\n            </Container>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Main;\r\n\r\n\r\nconst Btn = styled(Button)`\r\n\r\nmargin-bottom:10px;\r\n`;\r\n","import React from \"react\";\r\nimport Header from \"../Common Components/Navbar\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { Button, Container, Form } from \"react-bootstrap\";\r\nimport styled from 'styled-components';\r\nimport { useStopwatch } from 'react-timer-hook';\r\nimport { Card, CardText, CardBody, CardTitle } from 'reactstrap';\r\n\r\n\r\nconst Beginner = () => {\r\n    const { id } = useParams();\r\n    const history = useHistory();\r\n    const [questions, setQuestions] = useState([]);\r\n    const [images, setImages] = useState([]);\r\n    const [max, setMax] = useState(10)\r\n    // var max = 10;\r\n    const min = 0\r\n    const [scores, setscores] = useState(0);\r\n    const [rand, setRandom] = useState(0);\r\n    const [count, setcount] = useState(1);\r\n    const [token, settoken] = useState(false);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [textvalue, settextvalue] = useState(\"\");\r\n    const [incorrect, setIncorrect] = useState(0);\r\n    var randomnumber = [0];\r\n    // const [module, setmodule] = useState(0);\r\n    const [ans, setans] = useState(\"\")\r\n\r\n\r\n    // const [show, setShow] = useState(false);\r\n\r\n    // const handleClose = () => setShow(false);\r\n    // const handleShow = () => setShow(true);\r\n\r\n    const {\r\n        seconds,\r\n        minutes,\r\n        pause,\r\n    } = useStopwatch({ autoStart: true });\r\n\r\n\r\n    const shuffleWord = (word) => {\r\n        if (word.length < 4) return word;\r\n        const first = word.slice(0, 1);\r\n        const middle = word.slice(1, -1);\r\n        const last = word.slice(-1);\r\n        const shuffled = middle\r\n            .split(\"\")\r\n            .sort(() => 0.5 - Math.random())\r\n            .join(\"\");\r\n        return first + shuffled + last;\r\n    };\r\n\r\n    const processSentence = (sentence) => {\r\n        return sentence\r\n            .split(/(\"[^\"]+\"|[^\"\\s]+)/g)\r\n            .map(shuffleWord)\r\n            .join(\"\");\r\n    }\r\n\r\n\r\n    function range(start, end) {\r\n        return Array(end - start + 1).fill().map((_, idx) => start + idx)\r\n    }\r\n\r\n\r\n    const checkanswer = (user_ans) => {\r\n\r\n        settextvalue(\"\");\r\n\r\n        if (user_ans == answers[rand]) {\r\n            setscores(scores + 1);\r\n            if (count < max) {\r\n\r\n                console.log(count);\r\n                console.log(max);\r\n                console.log(count < max);\r\n                var temp = Math.floor(min + (Math.random() * (max - min)));\r\n\r\n\r\n                while (randomnumber.includes(temp))\r\n                    temp = Math.floor(min + (Math.random() * (max - min)));\r\n\r\n\r\n                randomnumber.push(temp);\r\n\r\n                setRandom(temp);\r\n                setcount(count + 1);\r\n                if (answers[temp] && answers[temp].includes(' '))\r\n                    setans(processSentence(answers[temp]))\r\n\r\n                else if (answers[temp] && answers[temp].length > 1) {\r\n\r\n                    setans(shuffleWord(answers[temp]))\r\n                }\r\n                else\r\n                    setans(\"\")\r\n\r\n            }\r\n            else {\r\n                settoken(true);\r\n            }\r\n        } else {\r\n            setIncorrect(incorrect + 1);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get(\"http://localhost:5000/api/\" + id + \"/questions\").then((Response) => {\r\n            console.log(Response.data.questions);\r\n            console.log(Response.data.images);\r\n            console.log(Response.data.answers);\r\n\r\n            setQuestions(Response.data.questions);\r\n            setImages(Response.data.images);\r\n            setMax(Response.data.questions.length);\r\n            // setmodule(2);\r\n            setAnswers(Response.data.answers);\r\n            if (Response.data.answers[0] && Response.data.answers[0].includes(' '))\r\n                setans(processSentence(Response.data.answers[0]))\r\n\r\n            else if (Response.data.answers[0] && Response.data.answers[0].length > 1) {\r\n\r\n                setans(shuffleWord(Response.data.answers[0]))\r\n            }\r\n            else\r\n                setans(\"\")\r\n            // setRandom(Math.floor(min + (Math.random() * (max-min))))\r\n        });\r\n\r\n\r\n    }, []);\r\n\r\n\r\n    function SubmitResults() {\r\n        axios.post(\"http://localhost:5000/api/save_answers\", {\r\n\r\n            minutes: minutes,\r\n            seconds: seconds,\r\n            scores: scores,\r\n            penalty: incorrect,\r\n            moduleId: id\r\n\r\n        }).then((res) => {\r\n\r\n            console.log(\"saved\");\r\n            if (id < 8) {\r\n                history.push('/beginner/' + (parseInt(id) + 1));\r\n                window.location.reload(false);\r\n            }\r\n            else\r\n                history.push('/intermediate/' + (parseInt(id) + 1));\r\n\r\n\r\n        })\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {/* <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Modal heading</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleClose}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal> */}\r\n            <Header />\r\n\r\n            <Container>\r\n                <CardStyle border='dark' className=\"float-left text-left\">\r\n                    <CardTitle >\r\n                        <CardText> Timer : {minutes}:{seconds}</CardText>\r\n\r\n                    </CardTitle>\r\n                    <CardBody>\r\n                        <h2><span style={{ marginRight: '30px' }}>Scores : {scores}</span><span>Penalties : {incorrect}</span></h2>\r\n\r\n                    </CardBody>\r\n                </CardStyle>\r\n\r\n                {!token ?\r\n\r\n                    (\r\n                        <>\r\n                            <h1>Question No. {count}</h1>\r\n                            <h1 >{questions[rand]}</h1>\r\n\r\n                            <div>\r\n                                {\r\n                                    images[rand] ?\r\n                                        (<><img src={\"/images/\" + images[rand]} alt=\" \"></img><br /></>)\r\n                                        : null\r\n                                }\r\n                            </div>\r\n\r\n                            <div style={{ height: 150 + 'px', marginTop: '20px' }}>\r\n                                {\r\n                                    images[rand] === \"insert_tab.jpeg\" ?\r\n\r\n                                        [...range(1, 11)].map((value) => {\r\n                                            return (\r\n                                                <Button className=\"btn-lg\" style={{ marginRight: '3px' }} onClick={() => checkanswer(value)}>{value}</Button>\r\n                                            )\r\n                                        })\r\n\r\n                                        : images[rand] === \"home_tab.jpg\" ?\r\n\r\n                                            [...range(1, 25)].map((value) => {\r\n                                                return (\r\n                                                    <Button style={{ marginRight: '3px' }} onClick={() => checkanswer(value)}>{value}</Button>\r\n                                                )\r\n                                            })\r\n                                            : images[rand] === \"ribbon.png\" ?\r\n\r\n                                                [...range(1, 3)].map((value) => {\r\n                                                    return (\r\n                                                        <Button className=\"btn-lg\" style={{ marginRight: '10px' }} onClick={() => checkanswer(value)}>{value}</Button>\r\n                                                    )\r\n                                                }) :\r\n                                                (<>\r\n                                                    <h4> Hint: {ans}</h4>\r\n                                                    <Form onSubmit={(e) => { e.preventDefault() }}>\r\n                                                        <Form.Control type=\"text\" value={textvalue} onChange={(e) => settextvalue(e.target.value)} placeholder=\"Your Answer\" />\r\n                                                    </Form>\r\n                                                    <Btn onClick={() => { checkanswer(textvalue); }}  >Submit Answer</Btn>\r\n\r\n                                                </>)\r\n\r\n                                }\r\n\r\n\r\n                                {/* <Btn onClick={() => {\r\n                        if (count !== max) {\r\n                            setRandom(Math.floor(min + (Math.random() * (max - min))));\r\n                            setCount(count + 1);\r\n                        }\r\n                        else { setToken(true) }\r\n                    }} disabled={token}>Submit</Btn> */}\r\n                                <br />\r\n                            </div>\r\n                        </>\r\n                    ) : null\r\n\r\n                }\r\n                <div style={{ height: 80 + 'px' }}>\r\n                    <Btn variant=\"success\" disabled={!token} onClick={() => { pause(); SubmitResults(); }}>Finish Test</Btn>\r\n                </div>\r\n            </Container>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Beginner;\r\nconst Btn = styled(Button)`\r\nfloat:right;\r\nmargin-right: 3px;\r\n// margin-bottom:20px;\r\n`;\r\nconst CardStyle = styled(Card)`\r\nbackground: white;\r\nbox-shadow: 6px 5px 5px rgb(0 0 0 );\r\n    width: 400px;\r\n    // height: 350px;\r\n   border: 2px solid black;\r\n  padding:20px;\r\n`;","import './App.css';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n// import Home from './pages/Home'\r\nimport Main from './pages/Main'\r\nimport Beginner from './pages/Beginner';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path='/' exact component={Main} />\r\n          <Route path='/beginner/:id' component={Beginner} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}